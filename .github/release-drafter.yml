# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# Release Drafter configuration file
#
# This file defines how release notes are generated automatically based on merged pull requests and their associated
# metadata.
#
# See: https://github.com/release-drafter/release-drafter
# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

# Template used for the release name (e.g., "v1.2.3")
name-template: 'v$RESOLVED_VERSION'

# Template used for the Git tag when the release is published
tag-template: 'v$RESOLVED_VERSION'

# Categorize pull requests into sections based on their labels
categories:
  - title: '🚀 Features'       # PRs labeled as new features or enhancements
    labels:
      - 'feature'
      - 'enhancement'
  - title: '🐛 Fixes'          # PRs labeled as bug fixes
    labels:
      - 'fix'
      - 'bug'
  - title: '🧰 Maintenance'    # PRs labeled as chores or internal maintenance
    labels:
      - 'chore'

# Template for individual changelog entries
# Includes PR title, author, and number (e.g., "- Fix bug @user (#42)")
change-template: '- $TITLE @$AUTHOR (#$NUMBER)'

# Determines which version component to bump based on PR labels
version-resolver:
  major:
    labels: ['major']   # If a PR has the label "major", bump the major version
  minor:
    labels: ['minor']   # If a PR has label "minor", bump minor version
  patch:
    labels: ['patch']   # If a PR has the label "patch", bump the patch version
  default: patch        # Fallback if no labels match: bump patch version

# Full release note template. The $CHANGES placeholder will be replaced with categorized entries.
template: |
  ## What’s Changed
  $CHANGES
